[{"appcode":"function OnUpdate(doc, meta, xattrs) {\n\n    if (meta.id == 'next') {\n      log('next');\n      return;    \n    }\n    \n    const data = doc.data;\n    if (Array.isArray(data) && data.length > 0) {\n        //continue\n    } else {\n        log(\"No data found\");\n        return;\n    }\n    \n    publishByBufferType(doc, meta.id);\n    \n}\n\nfunction OnDelete(meta, options) {\n    log(\"Doc deleted/expired\", meta.id);\n}\n\n\nfunction publishByBufferType(doc, id) {\n    const bufferType = doc.data[0].bufferType;\n    const publishDateTime = doc.publishDateTime || 0\n\n    if (publishDateTime < Date.now()) {\n        publishCache(id, bufferType)\n    } else {\n        updateNextQueue(bufferType);\n    }\n}\n\nfunction executeQuery(query, params) {\n    const results = N1QL(query, params, { isPrepared: true });\n    \n    const result_array = []\n    for (var item of results) { \n        result_array.push(item);\n    }\n    results.close();\n    \n    return result_array;\n}\n\nfunction publishCache(id, bufferType) {\n    log('publish')\n    \n    const query =\n        'SELECT data.* ' +\n        'FROM `vod`.`friday`.`venus_latest_cache_revamp_queue` queue ' +\n        'UNNEST queue.data AS data ' +\n        'WHERE META(queue).id  = $1 ' +\n        'ORDER BY data.orderId';\n\n    const cache_array = executeQuery(query, [id]);\n    \n    //write to cache\n    revamp['cache_latest_revamp::bufferType:' + bufferType] = cache_array;\n    \n    //move from queue to revamp\n    let doc = self[id]\n    doc.actualPublishDateTime = new Date().toISOString()\n    revamp[id] = doc;\n    delete self[id]\n    \n    updateNextQueue(bufferType);\n    \n    writeBackToDB(cache_array)\n}\n\n\nfunction updateNextQueue(bufferType) {\n    log('updateNextQueue, bufferType: ', bufferType)\n    \n    const query = \n    'SELECT META(q).id, MILLIS_TO_STR(q.publishDateTime) as publishDateTime ' +\n    'FROM `vod`.`friday`.`venus_latest_cache_revamp_queue` q ' +\n    'WHERE q.publishDateTime > NOW_MILLIS() ' +\n    'AND META(q).id != \"next\" ' +\n    'AND q.data[0].bufferType = $1 '\n    'ORDER BY q.publishDateTime ' +\n    'LIMIT 1';\n    \n    const cache_array = executeQuery(query, [bufferType]);\n    let next = cache_array[0];\n    \n    log(\"next\", next)\n    \n    //update timer\n    let timer_key = 'bufferType:' + bufferType;\n    if (next) {\n        const context = {\n            \"id\": next.id,\n            \"bufferType\": bufferType\n        }\n        log('context', context)\n        let publishDateTime = new Date(next.publishDateTime)\n        publishDateTime.setSeconds(publishDateTime.getSeconds() - 5);\n        createTimer(TimerCallback, publishDateTime, timer_key, context);\n    } else {\n        cancelTimer(CancelCallback, timer_key)\n        next = {}\n    }\n    \n    //update 'next' document\n    let status = self['next'] ?? {};\n    let buffer_type = status['buffer_type'] ?? {};\n    buffer_type[bufferType] = next;\n    status.buffer_type = buffer_type;\n    \n    self['next'] = status;\n}\n\nfunction TimerCallback(context) {\n    var now = new Date();\n    log('TimerCallback', now, context.id);\n    publishCache(context.id, context.bufferType);\n}\n\nfunction CancelCallback() {\n    log(\"cancelTimer\")\n}\n\n\nfunction writeBackToDB(doc) {\n    log(\"writeBack\")\n    \n    var request = {\n        path: '/latest-revamp/sync',\n        body: doc\n    };\n    \n    var response = curl('POST', api_endpoint, request);\n    if (response.status == 200) {\n      log(\"Successfully sync\");\n    }\n}","depcfg":{"buckets":[{"alias":"self","bucket_name":"vod","scope_name":"friday","collection_name":"venus_latest_cache_revamp_queue","access":"rw"},{"alias":"revamp","bucket_name":"vod","scope_name":"friday","collection_name":"venus_latest_cache_revamp","access":"rw"}],"curl":[{"hostname":"http://192.168.11.112:8080","value":"api_endpoint","auth_type":"no-auth","username":"","password":"","bearer_key":"","allow_cookies":true,"validate_ssl_certificate":false}],"source_bucket":"vod","source_scope":"friday","source_collection":"venus_latest_cache_revamp_queue","metadata_bucket":"vod","metadata_scope":"eventing","metadata_collection":"venus_latest_cache_revamp"},"version":"evt-7.6.3-4200-ee","enforce_schema":false,"handleruuid":1526836482,"function_instance_id":"FsQIQ","appname":"latest_movie_queue","settings":{"cursor_aware":false,"dcp_stream_boundary":"from_now","deployment_status":false,"description":"","execution_timeout":60,"language_compatibility":"7.2.0","log_level":"DEBUG","n1ql_consistency":"request","num_timer_partitions":128,"processing_status":false,"timer_context_size":1024,"user_prefix":"eventing","worker_count":1},"function_scope":{"bucket":"vod","scope":"friday"}}]